// Tasks im SubModul ausführen: gradle MODUL:clean build
buildscript {
    // Für Plugins
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal() // maven { url "https://plugins.gradle.org/m2"; name "plugins-gradle" }
    }

    dependencies {
        classpath "de.freese.gradle:gradle-plugins:0.0.1-SNAPSHOT"
        classpath "io.spring.gradle:dependency-management-plugin:$version_springDependencyManagement"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$version_springBootGradlePlugin"
        classpath "org.openjfx:javafx-plugin:$version_javafxPlugin"
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "de.freese.gradle.plugin.conventions"

    dependencyManagement {
        imports {
            mavenBom "de.codecentric:spring-boot-admin-dependencies:$version_springBootAdmin"
            mavenBom "org.springframework.boot:spring-boot-dependencies:$version_springBoot"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$version_springCloud"
        }

        dependencies {
            dependency("com.esotericsoftware:kryo:$version_kryo")
            dependency("com.nimbusds:nimbus-jose-jwt:$version_nimbus")

            dependency("de.javakaffee:kryo-serializers:$version_kryoSerializers")

            dependency("io.jsonwebtoken:jjwt:$version_jjwt")

            //dependency("javax:javaee-web-api:$version_javaee")

            dependencySet(group: "org.apache.qpid", version: "$version_qpid") {
                entry "qpid-broker"
                entry("qpid-bdbstore") {
                    // Wird in keinem Repository gefunden.
                    exclude group: "com.sleepycat", name: "je"
                }
            }

            dependency("org.joinfaces:primefaces-spring-boot-starter:${version_joinfaces}")

            dependencySet(group: "org.openjdk.jmh", version: "$version_jmh") {
                entry "jmh-core"
                entry "jmh-generator-annprocess"
            }

            dependency("org.primefaces.themes:all-themes:$version_primefacesThemes")
            dependency("org.springdoc:springdoc-openapi-ui:$version_springdoc")

            dependencySet(group: "org.springframework.cloud", version: "$version_springCloudNetflix") {
                entry "spring-cloud-starter-netflix-ribbon"
                entry "spring-cloud-starter-netflix-hystrix"
                entry "spring-cloud-starter-netflix-hystrix-dashboard"
            }
        }
    }

    dependencies {
        //implementation(platform("de.freese:maven-bom:$version_mavenBom"))
        //testImplementation("org.junit.jupiter:junit-jupiter")
    }
}

project("kubernetes") {
    description = "Folder project"
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // The archive name. If the name has not been explicitly set, the pattern for the name is:
    // [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    // archiveFileName = "my-boot.jar"
    springBoot {
        mainClass = "disabled"
    }
}

project("kubernetes:kubernetes-microservice") {
    description = "Demo project for Kubernetes"
    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-webflux")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // The archive name. If the name has not been explicitly set, the pattern for the name is:
    // [archiveBaseName]-[archiveAppendix]-[archiveVersion]-[archiveClassifier].[archiveExtension]
    // archiveFileName = "my-boot.jar"
    springBoot {
        mainClass = "de.freese.kubernetes.microservice.MyApplication"
    }
}

project("spring-autoconfigure-dbserver") {
    description = "spring-autoconfigure-dbserver"
    dependencies {
        implementation("org.hsqldb:hsqldb")
        implementation("org.springframework.boot:spring-boot-starter-jdbc")

        testImplementation("com.h2database:h2")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // Deaktiviert, da wir 2 main-Klassen haben.
    springBoot {
        mainClass = "disabled"
    }
}

project("spring-cloud") {
    description = "Folder project"
    springBoot {
        mainClass = "disabled"
    }
}

project("spring-cloud:spring-cloud-api-gateway") {
    description = "spring-cloud-api-gateway"
    dependencies {
        implementation("org.springframework.cloud:spring-cloud-starter-gateway")
        implementation("org.springframework.cloud:spring-cloud-starter-loadbalancer")

        runtimeOnly("de.codecentric:spring-boot-admin-starter-client")
        runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")
        runtimeOnly("org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j")
        runtimeOnly("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.cloud.gateway.GatewayApplication"
    }

    //Für Platzhalter in application.properties
    ext.artifactId = project.name

    processResources {
        filesMatching("application.yml") {
            filteringCharset = "UTF-8"

            // Bei Problemen müssen die Platzhalter escaped werden: \${...}
            //expand(project.properties)            
        }
    }
}

project("spring-cloud:spring-cloud-boot-admin") {
    description = "Monitor für Spring-Boot Anwendungen"
    dependencies {
        implementation("de.codecentric:spring-boot-admin-starter-server")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.boot.cloud.admin.SpringBootAdminApplication"
    }
}

project("spring-cloud:spring-cloud-client") {
    description = "Client mit LoadBalancer"
    dependencies {
        implementation("com.github.ben-manes.caffeine:caffeine")
        implementation("org.springframework.boot:spring-boot-starter-webflux")
        implementation("org.springframework.cloud:spring-cloud-starter-loadbalancer")

        runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")
        runtimeOnly("org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j")
        runtimeOnly("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // Deaktiviert, da wir 2 main-Klassen haben.
    springBoot {
        mainClass = "disabled"
    }
}

project("spring-cloud:spring-cloud-eureka") {
    description = "EUREKA-Server (ServiceDiscovery) von spring-boot"
    dependencies {
        implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-server")

        runtimeOnly("de.codecentric:spring-boot-admin-starter-client")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.cloud.eureka.EurekaServerApplication"
    }

    //Für Platzhalter in application.properties
    ext.artifactId = project.name

    processResources {
        filesMatching("application.properties") {
            filteringCharset = "UTF-8"

            // Bei Problemen müssen die Platzhalter escaped werden: \${...}.}
            //expand(project.properties)
        }
    }
}

project("spring-cloud:spring-cloud-microservice") {
    description = "MicroService mit spring-boot"
    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-jdbc")
        implementation("org.springframework.boot:spring-boot-starter-web")
        implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")

        runtimeOnly("de.codecentric:spring-boot-admin-starter-client")
        runtimeOnly("org.hsqldb:hsqldb")
        runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")

        testImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.cloud.microservice.MicroServiceApplication"
    }

    //Für Platzhalter in application.properties
    ext.artifactId = project.name

    processResources {
        filesMatching("application.properties") {
            filteringCharset = "UTF-8"

            // Bei Problemen müssen die Platzhalter escaped werden: \${...}
            //expand(project.properties)                
        }
    }
}

project("spring-hateoas") {
    description = "Demo für REST-HATEOAS"
    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-hateoas")
        implementation("org.springframework.boot:spring-boot-starter-webflux")

//        runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")

//        testImplementation("com.jayway.jsonpath:json-path")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.hateoas.HateoasApplication"
    }

    //Für Platzhalter in application.properties
    ext.artifactId = project.name

    processResources {
        filesMatching("application.properties") {
            filteringCharset = "UTF-8"

            // Bei Problemen müssen die Platzhalter escaped werden: \${...}
            expand(project.properties)
        }
    }
}

project("spring-hystrix") {
    description = "Hystrix-Demo von spring-boot"
    dependencies {
        implementation("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
        implementation("org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard")

        runtimeOnly("org.springframework.boot:spring-boot-starter-json")
        runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")

        testImplementation("org.junit.jupiter:junit-jupiter")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // Deaktiviert, da wir 2 main-Klassen haben.
    springBoot {
        mainClass = "disabled"
    }
}

project("spring-integration") {
    description = "Test Projekt für das Spring-Integration Modul"
    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-integration") {
            exclude group: "ch.qos.logback", module: "logback-classic"
        }

        testImplementation("org.junit.jupiter:junit-jupiter")
        testImplementation("org.slf4j:slf4j-simple")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // Deaktiviert, da wir keine main-Klasse haben.
    springBoot {
        mainClass = "disabled"
    }
}

project("spring-javafx") {
    apply plugin: "org.openjfx.javafxplugin"
    description = "spring with javafx"
    dependencies {
        implementation("org.springframework.boot:spring-boot-starter")

        javafx {
            version = "$version_javafxBase"
            modules = ["javafx.controls", "javafx.fxml"]
        }
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.javafx.MainSpringFxApplication"
    }
}

project("spring-jwt") {
    description = "JWT-Demo"
    dependencies {
        implementation("com.nimbusds:nimbus-jose-jwt")

        // Ältere Alternative für nimbus-jose-jwt
        implementation("io.jsonwebtoken:jjwt")

        implementation("org.springframework:spring-jdbc")
        implementation("org.springframework.boot:spring-boot-starter-cache")
        implementation("org.springframework.boot:spring-boot-starter-security")
        implementation("org.springframework.boot:spring-boot-starter-web")

        //runtimeOnly("org.glassfish.jaxb:jaxb-runtime")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation("org.springframework.security:spring-security-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.jwt.JwtAuthorisationApplication"
    }
}

project("spring-kryo") {
    description = "Kryo Demo"
    dependencies {
        implementation("com.esotericsoftware:kryo")
        implementation("de.javakaffee:kryo-serializers")

        implementation("org.springframework.boot:spring-boot-starter-web")
        implementation("org.springframework.boot:spring-boot-starter-webflux")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.kryo.KryoApplication"
    }
}

project("spring-ldap-unboundid") {
    description = "spring with ldap (unboundid)"
    dependencies {
        implementation("com.unboundid:unboundid-ldapsdk")
        implementation("org.springframework.boot:spring-boot-starter-security")
        implementation("org.springframework.boot:spring-boot-starter-web")
        implementation("org.springframework.security:spring-security-ldap")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation("org.springframework.security:spring-security-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.ldap.unboundid.LdapApplication"
    }
}

project("spring-messaging") {
    description = "Folder project"
    springBoot {
        mainClass = "disabled"
    }
}

project("spring-messaging:spring-messaging-amqp-qpid") {
    description = "Messaging with AMQP by Apache QPID"
    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-amqp")
        implementation("org.springframework.boot:spring-boot-starter-json")
        implementation("org.apache.qpid:qpid-broker")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "org.spring.messaging.amqp.qpid.SpringQpidApplication"
    }
}

project("spring-messaging:spring-messaging-jms") {
    description = "Messaging with JMS by ActiveMQ"
    dependencies {
        implementation("org.apache.activemq:artemis-server")
        implementation("org.springframework.boot:spring-boot-starter-json")
        implementation("org.springframework.boot:spring-boot-starter-artemis")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.messaging.jms.SpringJmsApplication"
    }
}

project("spring-messaging:spring-messaging-kafka") {
    description = "Messaging with Apache Kafka"
    dependencies {
        implementation("org.springframework.cloud:spring-cloud-stream-binder-kafka")
//        implementation("org.springframework.cloud:spring-cloud-starter-stream-kafka")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation("org.springframework.kafka:spring-kafka-test")
    }
}

project("spring-microservice-jmh") {
    description = "JMH-Benchmark eines MicroService mit spring-boot"
    dependencies {
        implementation("org.openjdk.jmh:jmh-core")
        implementation("org.springframework.boot:spring-boot-starter-web")
        implementation("org.springframework.boot:spring-boot-starter-webflux")

        //compileOnly("org.openjdk.jmh:jmh-generator-annprocess")
        //testAnnotationProcessor("org.openjdk.jmh:jmh-generator-annprocess")
        //runtimeOnly("org.openjdk.jmh:jmh-generator-annprocess")
        //implementation("org.openjdk.jmh:jmh-generator-annprocess")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.Benchmarks"
    }

    test {
        filter {
            // JMH-Test deaktivieren, weil das mit den Annotation-Processor nicht klappt.
            excludeTestsMatching "de.freese.spring.TestRestService.testBenchmark"
        }
    }

    //Für Platzhalter in application.properties
    ext.artifactId = project.name

    processResources {
        filesMatching("application.yml") {
            filteringCharset = "UTF-8"

            // Bei Problemen müssen die Platzhalter escaped werden: \${...}
            expand(project.properties)
        }
    }
}

project("spring-openapi") {
    description = "OpenApi-Demo"
    dependencies {
        implementation("org.springdoc:springdoc-openapi-ui")
        implementation("org.springframework.boot:spring-boot-starter-web")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.openapi.OpenApiApplication"
    }
}

project("spring-reactive-jdbc") {
    description = "Reactive JDBC with Spring"
    dependencies {
        implementation("io.r2dbc:r2dbc-h2")
        implementation("org.springframework.boot:spring-boot-starter-data-r2dbc")
        implementation("org.springframework.boot:spring-boot-starter-jdbc")
        implementation("org.springframework.boot:spring-boot-starter-webflux")

        testImplementation("io.projectreactor:reactor-test")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.reactive.SpringReactiveJdbcApplication"
    }

//    test.enabled = false
}

project("spring-resilience") {
    description = "Demo project for Spring Boot"
    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-webflux")
        implementation("org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j")

        runtimeOnly("de.codecentric:spring-boot-admin-starter-client")
        runtimeOnly("io.micrometer:micrometer-registry-prometheus")
        runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")

        testImplementation("io.github.resilience4j:resilience4j-all")
        testImplementation("io.projectreactor:reactor-test")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.resilience.SpringResilienceApplication"
    }

    //Für Platzhalter in application.properties
    ext.artifactId = project.name

    processResources {
        filesMatching("application.yml") {
            filteringCharset = "UTF-8"

            // Bei Problemen müssen die Platzhalter escaped werden: \${...}
            //expand(project.properties)
        }
    }
}

project("spring-ribbon") {
    description = "ribbon Loadbalancer von spring-boot"
    dependencies {
        implementation("org.apache.httpcomponents:httpclient")
        implementation("org.springframework.boot:spring-boot-starter-web")
        implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        implementation("org.springframework.cloud:spring-cloud-starter-netflix-ribbon")

        testImplementation("io.projectreactor:reactor-test")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    // Deaktiviert, da wir 2 main-Klassen haben.
    springBoot {
        mainClass = "disabled"
    }
}

project("spring-rsocket") {
    description = "rsocket-Server"
    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
        implementation("org.springframework.boot:spring-boot-starter-rsocket")
        implementation("org.springframework.boot:spring-boot-starter-security")
        implementation("org.springframework.security:spring-security-messaging")
        implementation("org.springframework.security:spring-security-rsocket")

        testImplementation("io.projectreactor:reactor-test")
        testImplementation("org.springframework.boot:spring-boot-starter-test")
    }
    test {
        filter {
            // Funktioniert irgendwie nicht mehr.
            excludeTestsMatching "de.freese.spring.rsocket.RSocketClientToServerDeniedConnectionTest.testConnectionIsRefused"
        }
    }
}

project("spring-testcontainers") {
    description = "Demo für Test-Container"
    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-jdbc")

        testImplementation("com.h2database:h2")
        testImplementation("com.oracle.database.jdbc:ojdbc11")
        testImplementation("org.apache.derby:derby")
        testImplementation("org.hsqldb:hsqldb")
        testImplementation("org.junit.jupiter:junit-jupiter")
        testImplementation("org.mariadb.jdbc:mariadb-java-client")
        testImplementation("org.postgresql:postgresql")
        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude module: "junit-vintage-engine"
        }
        testImplementation("org.testcontainers:junit-jupiter")
        testImplementation("org.testcontainers:mariadb")
        testImplementation("org.testcontainers:oracle-xe")
        testImplementation("org.testcontainers:postgresql")
    }
}

project("spring-thymeleaf") {
    description = "Spring Boot Web Thymeleaf mit Security Beispiel"
    dependencies {
        implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")

        implementation("org.apache.httpcomponents.client5:httpclient5")
        implementation("org.springframework.boot:spring-boot-starter-json")
        implementation("org.springframework.boot:spring-boot-starter-security")
        implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
        implementation("org.springframework.boot:spring-boot-starter-validation")
        implementation("org.springframework.boot:spring-boot-starter-web")

        // hot swapping, disable cache for template, enable live reload
        //implementation("org.springframework.boot:spring-boot-devtools")

        implementation("org.thymeleaf.extras:thymeleaf-extras-springsecurity6")

        runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")

        // Optional, for bootstrap
        //runtimeOnly("org.webjars:bootstrap:4.6.0")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation("org.springframework.boot:spring-boot-starter-webflux")
        testImplementation("org.springframework.security:spring-security-test")
    }

    // Durch die parallelen Tests kann es passsieren, das die Ports 8080 und 8443 bereits belegt sind.
    // Die Alternative wäre den Build durch 'gradle --no-parallel --max-workers 1 test' zu starten.
    test {
        filter {
            // Klasse deaktivieren
            excludeTestsMatching "de.freese.spring.thymeleaf.rest.TestRestWithWebClientSSL"

            // Einzelne Methode deaktivieren
            // excludeTestsMatching "de.freese.spring.thymeleaf.rest.TestRestWithWebClientSSL.test000HealthEndpoint"

            // Package Deaktivierung mit Wildscards
            //excludeTestsMatching "*.integration.*"

            // Methoden Deaktivierung mit Wildscards
            //excludeTestsMatching "*stress*"
        }
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    springBoot {
        mainClass = "de.freese.spring.thymeleaf.ThymeleafApplication"
    }

    //Für Platzhalter in application.properties
    ext.artifactId = project.name

    processResources {
        filesMatching("application.yml") {
            filteringCharset = "UTF-8"

            // Bei Problemen müssen die Platzhalter escaped werden: \${...}
            expand(project.properties)
        }
    }
}
