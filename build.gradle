// Execute Tasks in SubModule: gradle MODUL:clean build
plugins {
    id "de.freese.gradle.java.conventions" version "$version_myJavaConventionPlugin" apply false
    id "io.spring.dependency-management" version "$version_springDependencyManagement" apply false
    id "org.openjfx.javafxplugin" version "$version_javafxPlugin" apply false
    id "org.springframework.boot" version "$version_springBoot" apply false
}

allprojects {
    apply plugin: "base"

    ant.lifecycleLogLevel = "INFO"

    // repositories {
    //
    // }
}

subprojects {
    apply plugin: "de.freese.gradle.java.conventions"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom("de.codecentric:spring-boot-admin-dependencies:$version_springBootAdmin")
            mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
            // mavenBom("org.springframework.boot:spring-boot-dependencies:$version_springBoot")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:$version_springCloud")
        }

        dependencies {
            dependency("com.atomikos:transactions-spring-boot3-starter:$version_atomicos")
            dependency("com.esotericsoftware:kryo:$version_kryo")

//            dependency("de.javakaffee:kryo-serializers:$version_kryoSerializers")

            // dependency("javax:javaee-web-api:$version_javaee")
            dependency("jakarta.platform:jakarta.jakartaee-api:$version_jakartaApi")

            dependencySet(group: "org.apache.qpid", version: "$version_qpid") {
                entry("qpid-broker") {
                    exclude group: "ch.qos.logback", name: "logback-core"
                    exclude group: "ch.qos.logback", name: "logback-classic"
                }
                entry("qpid-bdbstore") {
                    // Not found in any Repository.
                    exclude group: "com.sleepycat", name: "je"
                }
            }

            dependencySet(group: "org.apache.tomcat", version: dependencyManagement.importedProperties["tomcat.version"]) {
                entry "tomcat-embed-jasper"
            }

            dependency("org.joinfaces:primefaces-spring-boot-starter:$version_joinfaces")

            dependencySet(group: "org.openjdk.jmh", version: "$version_jmh") {
                entry "jmh-core"
                entry "jmh-generator-annprocess"
            }

            // dependency("org.primefaces:primefaces:$version_primefaces")
            // dependency("org.primefaces.extensions:primefaces-extensions:$version_primefaces")
            dependency("org.primefaces.themes:all-themes:$version_primefacesThemes")
            dependency("org.springdoc:springdoc-openapi-ui:$version_springDoc")

            dependency("software.xdev:chartjs-java-model:$version_chartjsJavaModel")

            dependencySet(group: "org.springframework.cloud", version: "$version_springCloudNetflix") {
                entry "spring-cloud-starter-netflix-ribbon"
                entry "spring-cloud-starter-netflix-hystrix"
                entry "spring-cloud-starter-netflix-hystrix-dashboard"
            }
        }
    }

    pluginManager.withPlugin("java") {
        dependencies {
            // implementation(platform("de.freese:maven-bom:$version_mavenBom"))

            runtimeOnly("org.springframework.boot:spring-boot-properties-migrator")

            testImplementation("org.awaitility:awaitility")
            testImplementation("org.junit.jupiter:junit-jupiter")
            testRuntimeOnly("org.junit.platform:junit-platform-launcher")
        }
    }
}

// For Composite Build.
tasks.register("cleanAll", GradleBuild) {
    tasks = ["clean"]
}
tasks.register("buildAll", GradleBuild) {
    tasks = ["build"]
}

// project("kubernetes") {
//    apply plugin: "org.springframework.boot"
//    description = "Folder project"
//    // All SubProjects have Plugin 'org.springframework.boot' that requires a mainClass.
//    springBoot {
//        mainClass = "disabled"
//    }
//}
//
// project("spring-cloud") {
//    apply plugin: "org.springframework.boot"
//    description = "Folder project"
//    // All SubProjects have Plugin 'org.springframework.boot' that requires a mainClass.
//    springBoot {
//        mainClass = "disabled"
//    }
//}
//
// project("spring-messaging") {
//    apply plugin: "org.springframework.boot"
//    description = "Folder project"
//    // All SubProjects have Plugin 'org.springframework.boot' that requires a mainClass.
//    springBoot {
//        mainClass = "disabled"
//    }
//}
