# https://www.baeldung.com/dockerizing-spring-boot-application

# docker network create my-fancy-network
# docker run -i -t --name container1 --net=my-fancy-network --net-alias=container1 ubuntu:trusty /bin/bash
# docker run -i -t --name container2 --net=my-fancy-network --net-alias=container2 ubuntu:trusty /bin/bash
# Die Container können sich nun untereinander über ihre Aliasnamen ansprechen (HTTP://container1), keine IPs verwenden !

# docker-compose --file docker-compose.yml up --build --scale spring-cloud-microservice=3 --remove-orphans;
# docker-compose up --build --scale spring-cloud-microservice=3 --remove-orphans;
# docker-compose down;
# docker-compose rm;

# docker-compose ps;
# docker logs ID/NAME;


# for i in {1..1000}; do curl localhost/service/sysdate; echo ""; sleep 1; done;
#
# multi-stage builds: https://docs.docker.com/develop/develop-images/multistage-build/
# https://github.com/benwilcock/spring-cloud-gateway-demo


# Direkt nach dem Hochfahren funktioniert das API-Gateway noch nicht,
# da sich die Micro-Services erst beim EUREKA registrieren müssen,
# und das API-Gateway sich die aktuelle Server-Liste ziehen muss !
# Das dauert ca. 10 Sekunden !
# Und da alle Container parallel gestartet werden klappt das initial leider nicht.
# Mögliche Lösung:
# - Boot-Admin normal starten
# - Eureka normal starten
# - MicroServices mit 5 Sekunden Delay starten
# - API-GATEWAY mit 10 Sekunden Delay starten
version: '3'
services:

    spring-cloud-boot-admin:
        container_name: spring-cloud-boot-admin
        build:
            context: ./spring-cloud-boot-admin
            dockerfile: Dockerfile
        image: spring-cloud-boot-admin:latest
        ports:
            - "9000:9000"
        restart: "no"
        networks:
            - spring-cloud-network

    spring-cloud-eureka:
        container_name: spring-cloud-eureka
        build:
            context: ./spring-cloud-eureka
            dockerfile: Dockerfile
        image: spring-cloud-eureka:latest
        environment:
            - VM_PARAMS=
                -DADMIN_SERVER=http://spring-cloud-boot-admin:9000
        ports:
            - "8761:8761"
        restart: "no"
        networks:
            - spring-cloud-network

    spring-cloud-microservice:
        # Kein 'container_name' möglich wegen Scaling: docker-compose up --scale spring-cloud-microservice=3
        # container_name: spring-cloud-microservice
        build:
            context: ./spring-cloud-microservice
            dockerfile: Dockerfile
        image: spring-cloud-microservice:latest
        environment:
            - VM_PARAMS=
                -Xms64m
                -Xmx128m
                -DEUREKA_SERVER=http://spring-cloud-eureka:8761/eureka
                -DADMIN_SERVER=http://spring-cloud-boot-admin:9000
        ports:
            - "18888-19000:8888"
        depends_on:
            - spring-cloud-boot-admin
            - spring-cloud-eureka
        restart: "no"
        networks:
            - spring-cloud-network

    #    haproxy-loadbalancer:
    #        image: "${HAPROXY_IMAGE:-dockercloud/haproxy:latest}"
    #        #image: "${HAPROXY_IMAGE:-localhost:5083/haproxy:latest}"
    #        volumes:
    #            - /var/run/docker.sock:/var/run/docker.sock
    #        ports:
    #            - "8090:80"
    #        depends_on:
    #            - spring-cloud-microservice
    #        links:
    #            - spring-cloud-microservice
    #        restart: "no"
    #        networks:
    #            - spring-cloud-network

    spring-cloud-api-gateway:
        container_name: spring-cloud-api-gateway
        build:
            context: ./spring-cloud-api-gateway
            dockerfile: Dockerfile
        image: spring-cloud-api-gateway:latest
        environment:
            - VM_PARAMS=
                -Xms64m
                -Xmx128m
                -DEUREKA_SERVER=http://spring-cloud-eureka:8761/eureka
                -DADMIN_SERVER=http://spring-cloud-boot-admin:9000
            #-DMICRO_SERVICE=haproxy-loadbalancer:80
        ports:
            - "8091:8091"
        depends_on:
            - spring-cloud-boot-admin
            - spring-cloud-eureka
            - spring-cloud-microservice
            #- haproxy-loadbalancer
        restart: "no"
        networks:
            - spring-cloud-network

networks:
    spring-cloud-network:
        driver: bridge


        # localhost im Docker-Netz finden:
        # ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1;


        #image: localhost:5000/spring-cloud-microservice:latest
        #restart: always

#         environment:
#             SPRING_APPLICATION_JSON:
#                 '{
#         "eureka":
#         {
#           "client":
#           {
#             "serviceUrl":
#             {
#               "defaultZone": "http://eureka:9001/eureka"
#             }
#           },
#           "instance":
#           {
#             "preferIpAddress": "true"
#           }
#         },
#         "spring":
#         {
#           "boot":
#           {
#             "admin":
#             {
#               "client":
#               {
#                 "instance":
#                 {
#                   "prefer-ip": "true"
#                 },   
#                 "url": "http://admin:9000"
#               }
#             }
#           }
#         }
#         }'
