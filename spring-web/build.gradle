plugins {
    id "java"
    id "org.springframework.boot"
}

description = "Demo f√ºr spring-boot-web mit JSF"

dependencies {
    implementation("org.joinfaces:primefaces-spring-boot-starter")

    // Error WeldServletLifecycle.initialize
    // if (deployment.getBeanDeploymentArchives().isEmpty()) {
    //     // Skip initialization - there is no bean archive in the deployment
    //     CommonLogger.LOG.initSkippedNoBeanArchiveFound();
    //     return false;
    // }
    // runtimeOnly("org.apache.myfaces.core:myfaces-impl:4.0.2")
    // runtimeOnly("org.apache.tomcat.embed:tomcat-embed-jasper")
    // implementation("org.glassfish:jakarta.faces:4.0.7")
    // implementation("org.primefaces:primefaces::jakarta")
    // runtimeOnly("org.primefaces.extensions:primefaces-extensions::jakarta")
    // runtimeOnly("org.jboss.weld.servlet:weld-servlet-core:5.1.2.Final")
    // // runtimeOnly("org.jboss.weld.servlet:weld-servlet-shaded:5.1.2.Final")

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("software.xdev:chartjs-java-model")

    runtimeOnly("org.primefaces.themes:all-themes")
    runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

// Start: gradle bootRun --args="--spring.profiles.active=dev"
springBoot {
    mainClass = "de.freese.spring.web.SpringBootWebApplication"
}
// tasks.named("bootJar") {
//     layered {
//         enabled = false
//     }
// }

sourceSets {
    main {
        resources {
            srcDir(layout.projectDirectory.dir("src").dir("main").dir("webapp"))
        }
    }
}

// For Placeholder in Resources.
ext.artifactId = project.name

processResources {
    // All Files
    // expand(project.properties)

    // filesNotMatching(...) {
    // filesMatching("**/*.properties", "a.txt", "z.txt") {
    filesMatching("application.yml") {
        filteringCharset = "UTF-8"

        // If Problems escape Placeholder: \${...}
        expand(project.properties)

        // expand ("@project.description@": project.description,
        //		"@project.artifactId@": project.name,
        //		"@project.version@": project.version
        //)

        // filter{ it.replaceAll("@project.description@", project.description)}
        // filter{ it.replaceAll("@project.artifactId@", project.name)}
        // filter{ it.replaceAll("@project.version@", project.version)}

        // // Keeps Windows Line-Endings.
        // filter(org.apache.tools.ant.filters.FixCrLfFilter.class, eol: org.apache.tools.ant.filters.FixCrLfFilter.CrLf.newInstance("crlf"))
    }
}


tasks.register("copyLibs", Copy) {
    group = "spring-web"

    println("build " + project.name)

    into layout.buildDirectory

    into("libs") {
        from(configurations.runtimeClasspath)
    }
}
