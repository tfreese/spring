plugins {
    id "java"
    id "org.springframework.boot"
}

description = "Demo f√ºr spring-boot-web mit JSF"

dependencies {
    implementation("org.joinfaces:primefaces-spring-boot-starter")

    // // implementation("jakarta.faces:jakarta.faces-api:4.0.1") // provided
    // // implementation("jakarta.platform:jakarta.jakartaee-api") // provided
    // // implementation("org.apache.tomcat.embed:tomcat-embed-jasper")
    // implementation("org.primefaces:primefaces:$version_primefaces:jakarta")
    // implementation("org.primefaces.extensions:primefaces-extensions:$version_primefaces")
    // implementation("org.glassfish:jakarta.faces:4.0.7")
    // implementation("org.jboss.weld.servlet:weld-servlet-core:5.1.2.Final")
    // implementation("jakarta.enterprise:jakarta.enterprise.cdi-api:4.1.0")

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("software.xdev:chartjs-java-model")

    runtimeOnly("org.primefaces.themes:all-themes")
    runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")
}

// Start: gradle bootRun --args="--spring.profiles.active=dev"
springBoot {
    mainClass = "de.freese.spring.web.SpringBootWebApplication"
}

sourceSets {
    main {
        resources {
            srcDirs += ["${projectDir}/src/main/webapp"]
            // srcDir "src/main/webapp"
        }
    }
}

// For Placeholder in Resources.
ext.artifactId = project.name

processResources {
    // All Files
    // expand(project.properties)

    // filesNotMatching(...)
    // filesMatching("**/*.properties", "a.txt", "z.txt")
    filesMatching("application.yml") {
        filteringCharset = "UTF-8"

        // If Problems escape Placeholder: \${...}
        expand(project.properties)

        // expand ("@project.description@": project.description,
        //		"@project.artifactId@": project.name,
        //		"@project.version@": project.version
        //)

        // filter{ it.replaceAll("@project.description@", project.description)}
        // filter{ it.replaceAll("@project.artifactId@", project.name)}
        // filter{ it.replaceAll("@project.version@", project.version)}
    }
}


tasks.register("copyLibs", Copy) {
    group = "spring-web"

    println("build " + project.name)

    into layout.buildDirectory

    into("libs") {
        from(configurations.runtimeClasspath)
    }
}
