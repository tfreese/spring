# docker network create my-fancy-network
# docker run -i -t --name container1 --net=my-fancy-network --net-alias=container1 ubuntu:trusty /bin/bash
# docker run -i -t --name container2 --net=my-fancy-network --net-alias=container2 ubuntu:trusty /bin/bash
# Die Container können sich nun untereinander über ihre Aliasnamen ansprechen (HTTP://container1), keine IPs verwenden !

# docker-compose build;
# docker-compose up --build;
# docker-compose up -d --scale spring-microservice=3;
# docker-compose ps;
# docker logs ID/NAME;
# docker-compose down

# for i in {1..1000}; do curl localhost/service/sysdate; echo ""; sleep 1; done;
#
# multi-stage builds: https://docs.docker.com/develop/develop-images/multistage-build/
# https://github.com/benwilcock/spring-cloud-gateway-demo

version: '3'
services:

    spring-boot-admin:
        container_name: spring-boot-admin
        build:
            context: ./spring-boot-admin
            dockerfile: Dockerfile
        image: spring-boot-admin:latest
        ports:
            - 9000:9000
        restart_policy:
            condition: unless-stopped                                  

    spring-eureka:
        container_name: spring-eureka
        build:
            context: ./spring-eureka
            dockerfile: Dockerfile
        image: spring-eureka:latests
        ports:
            - 8761:8761
        restart_policy:
            condition: unless-stoppe                          

    spring-microservice:
        # Kein 'container_name' möglich wegen Scaling.
        build:
            context: ./spring-microservice
            dockerfile: Dockerfile
        image: spring-microservice:latest
        environment:
            - VM_PARAMS=
                -Xms64m
                -Xmx256m
                -DEUREKA_SERVER=http://spring-eureka:8761/eureka
                -DADMIN_SERVER=http://spring-boot-admin:9000              
        depends_on:
            - spring-boot-admin
            - spring-eureka
        restart_policy:
            condition: unless-stoppe          
                               
    loadbalancer:
        #image: "${HAPROXY_IMAGE:-dockercloud/haproxy:latest}"
        image: "${HAPROXY_IMAGE:-localhost:5083/haproxy:latest}"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        ports:
            - 8081:80
        depends_on:
            - spring-microservice
        links:
            - spring-microservice
        restart_policy:
            condition: unless-stoppe        
            
    spring-api-gateway:
        build:
            context: ./spring-api-gateway
            dockerfile: Dockerfile
        image: spring-api-gateway:latest
        environment:
            - VM_PARAMS=
                -Xms64m
                -Xmx256m
                -DEUREKA_SERVER=http://spring-eureka:8761/eureka
                -DADMIN_SERVER=http://spring-boot-admin:9000
                -DENABLE_EUREKA=true
                -DMICRO_SERVICE=loadbalancer:80
        ports:
            - 8082:9999               
        depends_on:
            - spring-boot-admin
            - spring-eureka
            - spring-microservice
            - loadbalancer
        restart_policy:
            condition: unless-stoppe                


# localhost im Docker-Netz finden:
# ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1;


#image: localhost:5000/spring-microservice:latest
#restart: always
        

# https://docs.docker.com/compose/compose-file/#resources                    
#         deploy:
#             resources:
#                 reservations:
#                     cpus: "0.5"
#                     memory: 128M
#                 limits:
#                     cpus: "1"
#                     memory: 256M

                    
#         environment:
#             SPRING_APPLICATION_JSON:
#                 '{
#         "eureka":
#         {
#           "client":
#           {
#             "serviceUrl":
#             {
#               "defaultZone": "http://eureka:9001/eureka"
#             }
#           },
#           "instance":
#           {
#             "preferIpAddress": "true"
#           }
#         },
#         "spring":
#         {
#           "boot":
#           {
#             "admin":
#             {
#               "client":
#               {
#                 "instance":
#                 {
#                   "prefer-ip": "true"
#                 },   
#                 "url": "http://admin:9000"
#               }
#             }
#           }
#         }
#         }'