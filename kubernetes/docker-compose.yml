# docker network create my-fancy-network
# docker run -i -t --name container1 --net=my-fancy-network --net-alias=container1 ubuntu:trusty /bin/bash
# docker run -i -t --name container2 --net=my-fancy-network --net-alias=container2 ubuntu:trusty /bin/bash
# Die Container können sich nun untereinander über ihre Aliasnamen ansprechen (HTTP://container1), keine IPs verwenden !

# docker-compose build
# docker-compose build up -d --scale kubernetes-microservice=3 --remove-orphans
# docker-compose ps
# docker-compose down
# docker-compose rm;
# docker logs ID/NAME;

# for i in {1..1000}; do curl localhost:8080; echo ""; sleep 1; done;
#
# multi-stage builds: https://docs.docker.com/develop/develop-images/multistage-build/

version: '3'
services:

    kubernetes-microservice-1:
        #container_name: kubernetes-microservice
        build:
            context: ./kubernetes-microservice
            dockerfile: Dockerfile
        image: kubernetes-microservice:latest
        ports:
            - "8080:8080"
        #image: localhost:5000/kubernetes-microservice:latest
        #restart: always
        #         environment:
        #             SPRING_APPLICATION_JSON:
        #                 '{
        #          "spring":
        #          {
        #            "boot":
        #            {
        #              "client":
        #              {
        #                "prefer-ip": "true"
        #              }
        #            }
        #          }
        #        }'
        # https://docs.docker.com/compose/compose-file/#resources                    
        deploy:
            resources:
                limits:
                    cpus: "0.5"
                    memory: 128M
                reservations:
                    cpus: "0.25"
                    memory: 64M

#    kubernetes-microservice-2:
#        build:
#            context: ./kubernetes-microservice
#            dockerfile: Dockerfile
#        image: kubernetes-microservice:latest
#        ports:
#            - "8080:8080"
#        deploy:
#            resources:
#                limits:
#                    cpus: "0.5"
#                    memory: 128M
#                reservations:
#                    cpus: "0.25"
#                    memory: 64M
#
#    kubernetes-microservice-3:
#        build:
#            context: ./kubernetes-microservice
#            dockerfile: Dockerfile
#        image: kubernetes-microservice:latest
#        ports:
#            - "8080:8080"
#        deploy:
#            resources:
#                limits:
#                    cpus: "0.5"
#                    memory: 128M
#                reservations:
#                    cpus: "0.25"
#                    memory: 64M

#    loadbalancer:
#        image: "${HAPROXY_IMAGE:-haproxy:latest}"
#        #restart: always
#        volumes:
#            - /var/run/docker.sock:/var/run/docker.sock
#        ports:
#            - "8080:8080"
#        links:
#            - kubernetes-microservice-1
#            - kubernetes-microservice-2
#            - kubernetes-microservice-3
