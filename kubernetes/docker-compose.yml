# docker network create my-fancy-network
# docker run -i -t --name container1 --net=my-fancy-network --net-alias=container1 ubuntu:trusty /bin/bash
# docker run -i -t --name container2 --net=my-fancy-network --net-alias=container2 ubuntu:trusty /bin/bash
# Die Container können sich nun untereinander über ihre Aliasnamen ansprechen (HTTP://container1), keine IPs verwenden !

# docker-compose build
# docker-compose up -d --scale microservice=3
# docker-compose scale microservice=3 (deprecated)
# docker-compose ps
# docker logs ID/NAME;
# docker-compose down

# for disk in {1..1000}; do curl localhost/greet; echo ""; sleep 1; done;
#
# multi-stage builds: https://docs.docker.com/develop/develop-images/multistage-build/

version: '3'
services:

    kubernetes-microservice:
        #container_name: kubernetes-microservice
        build:
            context: ./kubernetes-microservice
            dockerfile: Dockerfile
        image: kubernetes-microservice:latest
        #image: localhost:5000/kubernetes-microservice:latest
        #restart: always
        #         environment:
        #             SPRING_APPLICATION_JSON:
        #                 '{
        #          "spring":
        #          {
        #            "boot":
        #            {
        #              "client":
        #              {
        #                "prefer-ip": "true"
        #              }
        #            }
        #          }
        #        }'
        # https://docs.docker.com/compose/compose-file/#resources                    
        deploy:
            resources:
                limits:
                    cpus: "0.5"
                    memory: 128M
                reservations:
                    cpus: "0.25"
                    memory: 64M

    # export HAPROXY_IMAGE=haproxy:1.9.8-alpine
    loadbalancer:
        image: "${HAPROXY_IMAGE:-dockercloud/haproxy:latest}"
        #restart: always
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        ports:
            - "80:80"
        links:
            - kubernetes-microservice
