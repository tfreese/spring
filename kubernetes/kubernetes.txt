https://kubernetes.io/de/docs/setup/minikube/


# install minicube

#https://github.com/kubernetes/minikube/releases/latest
curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
&& chmod +x minikube \
&& sudo mv minikube /usr/local/bin/ \
&& minikube --help

# install kubectl
curl -Lo https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl \
&& chmod +x kubectl \
&& sudo mv kubectl /usr/local/bin/
&& kubectl version

# Start-Parameter
minikube config -h
minikube config set memory 2048 [2GB]
minikube config set cpus 4

# minicube mit 2GB RAM, 4 CPUs starten
minikube start [--memory=2048 --cpus=4]
minikube status;
minikube dashboard;


VBoxManage list runningvms;
docker ps;

Use 'minikube start -p <name>' to create a new cluster, or 'minikube delete' to delete this one.

kubectl cluster-info


# Test
kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.10 --port=8080;
#kubectl create hello-minikube --image=k8s.gcr.io/echoserver:1.10 --port=8080;
kubectl expose deployment hello-minikube --type=NodePort;
curl $(minikube service hello-minikube --url);

kubectl delete services hello-minikube;
kubectl delete deployment hello-minikube;
minikube stop;

kubectl get pod;
kubectl get deployment;
kubectl get service;


Hier ist ein Beispiel einer PersistentVolume-Konfiguration, um Daten im Verzeichnis / data beizubehalten:

kubectl apply -f ./persistentVolume.yml;
ubectl get pv;

apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0001
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 5Gi
  hostPath:
    path: /data/pv0001/
    
# POD    
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox
    command: ['sh', '-c', 'echo Hello Kubernetes! && sleep 3600']    
